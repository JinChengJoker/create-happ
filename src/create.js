import chalk from 'chalk';
import { $ } from 'execa';
import prompts from 'prompts';
import fs from 'fs-extra';
import path from 'path';
import { fileURLToPath } from 'url'
import { Command, Option } from 'commander'

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const templatesConfig = [
  {
    type: 'web-master',
    title: 'web ‰∏ªÂ∫îÁî®',
    repoUrl: 'https://e.coding.net/haplox/hapweb/template-web-master.git',
  },
  {
    type: 'web',
    title: 'web Â≠êÂ∫îÁî®',
    repoUrl: 'https://e.coding.net/haplox/hapweb/template-web.git',
  },
]

const runCommander = () => {
  const pkgPath = path.join(__dirname, '..', 'package.json')
  const pkg = JSON.parse(fs.readFileSync(pkgPath, 'utf-8'))
  const program = new Command();
  const typeChoices = templatesConfig.map(t => t.type)

  program
    .version(pkg.version)
    .addOption(new Option('-t, --type <type>', 'project type').choices(typeChoices))
    .option('-n, --name <name>', 'project name')

  program.parse();

  const options = program.opts();
  const { type, name } = options

  if (!type) {
    console.log('\n');
    console.log(chalk.red(`‚úñ ÂèÇÊï∞ '-t, --type <type>' Áº∫Â§±`))
    console.log('\n');
    process.exit(1);
  }

  if (!name) {
    console.log('\n');
    console.log(chalk.red(`‚úñ ÂèÇÊï∞ '-n, --name <name>' Áº∫Â§±`))
    console.log('\n');
    process.exit(1);
  }

  generator({
    templateType: type,
    appName: name
  })
}

const runPrompts = async () => {
  const appTypeChoices = templatesConfig.map(t => ({
    title: t.title,
    value: t.type
  }))

  const response = await prompts(
    [
      {
        type: 'select',
        name: 'templateType',
        message: 'ËØ∑ÈÄâÊã©Ë¶ÅÂàõÂª∫ÁöÑÂ∫îÁî®',
        choices: appTypeChoices,
      },
      {
        type: 'text',
        name: 'appName',
        message: 'ËØ∑ËæìÂÖ•Â∫îÁî®ÂêçÁß∞',
      },
    ],
    {
      onCancel: () => {
        console.log('\n');
        console.log(chalk.red(`‚úñ Êìç‰ΩúÂ∑≤ÂèñÊ∂à`))
        console.log('\n');
        process.exit()
      },
    },
  );
  const { templateType, appName } = response

  generator({
    templateType, appName
  })
}

const generator = async (options) => {
  const { templateType, appName } = options
  const template = templatesConfig.find(t => t.type === templateType)
  const dirName = /-web$/.test(appName) ? appName : `${appName}-web`
  const projectPath = path.resolve(dirName);

  if (
    fs.existsSync(projectPath) &&
    fs.statSync(projectPath).isDirectory() &&
    fs.readdirSync(projectPath).length > 0
  ) {
    console.log('\n');
    console.log(chalk.red('üôà ÂΩìÂâçÁõÆÂΩï‰∏ãÂ∑≤Â≠òÂú®ÂêåÂêç‰∏îÈùûÁ©∫È°πÁõÆ'));
    console.log('\n');
    process.exit(1);
  }

  console.log(chalk.gray('üöö Generating...'))

  try {
    await $`git clone ${template.repoUrl} ${dirName} --depth=1`

    // Âà†Èô§ .git
    const gitDirPath = path.join(projectPath, '.git')
    fs.removeSync(gitDirPath)

    // Êõ¥Êñ∞ package.json
    const projectPkgPath = path.join(projectPath, 'package.json')
    const projectPkg = JSON.parse(fs.readFileSync(projectPkgPath, 'utf-8'))
    projectPkg.name = appName
    fs.writeFileSync(projectPkgPath, JSON.stringify(projectPkg, null, 2) + '\n')

    if (templateType === 'web') {
      // ÁîüÊàê Dockerfile
      const dfTemplatePath = path.join(__dirname, '..', `template-${templateType}`, 'Dockerfile')
      const dfTemplateString = fs.readFileSync(dfTemplatePath, 'utf-8')
      const dfPath = path.join(projectPath, 'Dockerfile')
      const dfString = dfTemplateString.replace(/{{template}}/g, appName)
      fs.writeFileSync(dfPath, dfString)
    }

    console.log(chalk.gray('‚ú® Generate success!'))
    console.log(chalk.gray(`\nNext run:\n`))
    console.log(`  cd ${dirName}`)
    console.log(`  yarn install`)
    console.log(`  yarn dev`)
    console.log('\n');
  } catch (error) {
    fs.removeSync(projectPath)
    console.log(chalk.red(`‚úñ ${error.message}`))
    process.exit(1);
  }
}

const init = () => {
  if (process.argv.length > 2) {
    runCommander()
  } else {
    runPrompts()
  }
}

export {
  init
}